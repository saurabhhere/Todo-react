{"ast":null,"code":"var _jsxFileName = \"/home/saurabh/React-Context-Hooks/booklist/src/contexts/BookContext.js\";\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport { bookReducer } from '../reducers/bookReducer';\nexport const BookContext = createContext();\n\nconst BookContextProvider = props => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const localData = localStorage.getItem('books');\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('books', JSON.stringify(books)); // this hook will run whenever there is change in books\n  }, [books]);\n  return /*#__PURE__*/React.createElement(BookContext.Provider, {\n    value: {\n      books,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default BookContextProvider;","map":{"version":3,"sources":["/home/saurabh/React-Context-Hooks/booklist/src/contexts/BookContext.js"],"names":["React","createContext","useReducer","useEffect","bookReducer","BookContext","BookContextProvider","props","books","dispatch","localData","localStorage","getItem","JSON","parse","setItem","stringify","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,EAAjC;;AAEP,MAAMK,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACE,WAAD,EAAc,EAAd,EAAkB,MAAM;AAC1D,UAAMM,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,WAAOF,SAAS,GAAGG,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAH,GAA2B,EAA3C;AACD,GAHmC,CAApC;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,SAAL,CAAeR,KAAf,CAA9B,EADc,CAEd;AACD,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;AAIA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACU,QADT,CADF;AAKD,CAdD;;AAgBA,eAAeX,mBAAf","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\nimport { bookReducer } from '../reducers/bookReducer';\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = (props) => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const localData = localStorage.getItem('books');\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('books', JSON.stringify(books));\n    // this hook will run whenever there is change in books\n  }, [books]);\n  return (\n    <BookContext.Provider value={{ books, dispatch }}>\n      {props.children}\n    </BookContext.Provider>\n  );\n}\n \nexport default BookContextProvider;"]},"metadata":{},"sourceType":"module"}