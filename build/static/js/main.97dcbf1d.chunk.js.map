{"version":3,"sources":["reducers/todoReducer.js","contexts/TodoContext.js","components/Navbar.js","components/TodoDetails.js","components/TodoList.js","components/NewTodoForm.js","App.js","serviceWorker.js","index.js"],"names":["todoReducer","state","action","type","title","todo","brief","id","v4","filter","TodoContext","createContext","TodoContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","todos","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","TodoDetails","onClick","TodoList","map","key","NewTodoForm","useState","setTitle","setBrief","onSubmit","e","preventDefault","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAEaA,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CAChBG,MAAOF,EAAOG,KAAKD,MACnBE,MAAOJ,EAAOG,KAAKC,MACnBC,GAAIC,iBAER,IAAK,cACH,OAAOP,EAAMQ,QAAO,SAAAJ,GAAI,OAAIA,EAAKE,KAAOL,EAAOK,MACjD,QACE,OAAON,ICVAS,EAAcC,0BAkBZC,EAhBa,SAACC,GAAW,IAAD,EACXC,qBAAWd,EAAa,IAAI,WACpD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHR,mBAC9BK,EAD8B,KACvBC,EADuB,KASrC,OAJAC,qBAAU,WACRN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAE5C,CAACA,IAEF,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACnCR,EAAMc,WCHEC,EAVA,WAAO,IACZR,EAAUS,qBAAWnB,GAArBU,MACR,OACE,yBAAKU,UAAU,UACb,0CACA,iDAAuBV,EAAMW,OAA7B,8BCKSC,EAVK,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACbgB,EAAaQ,qBAAWnB,GAAxBW,SACR,OACE,wBAAIY,QAAS,kBAAMZ,EAAS,CAAElB,KAAM,cAAeI,GAAIF,EAAKE,OAC1D,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,SAASzB,EAAKC,SCWpB4B,EAfE,WAAO,IACdd,EAAUS,qBAAWnB,GAArBU,MACR,OAAOA,EAAMW,OACX,yBAAKD,UAAU,aACb,4BACGV,EAAMe,KAAI,SAAA9B,GACT,OAAS,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,UAKlD,yBAAKuB,UAAU,SAAf,4CCcWO,EA1BK,WAAO,IACjBhB,EAAaQ,qBAAWnB,GAAxBW,SADgB,EAEEiB,mBAAS,IAFX,mBAEjBlC,EAFiB,KAEVmC,EAFU,OAGED,mBAAS,IAHX,mBAGjBhC,EAHiB,KAGVkC,EAHU,KAexB,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACY,KAAVvC,GAEFiB,EAAS,CAAElB,KAAM,WAAYE,KAAM,CAAED,QAAOE,WAE9CiC,EAAS,IACTC,EAAS,MAKP,2BAAOrC,KAAK,OAAOyC,YAAY,aAAalB,MAAOtB,EACjDyC,SAAU,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOpB,UACrC,2BAAOvB,KAAK,OAAOyC,YAAY,WAAWlB,MAAOpB,EAC/CuC,SAAU,SAACH,GAAD,OAAOF,EAASE,EAAEI,OAAOpB,UACrC,2BAAOvB,KAAK,SAASuB,MAAM,eCLlBqB,MAZf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97dcbf1d.chunk.js","sourcesContent":["import {v4} from 'uuid';\n\nexport const todoReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, {\n        title: action.todo.title, \n        brief: action.todo.brief, \n        id: v4()}\n      ]\n    case 'REMOVE_TODO':\n      return state.filter(todo => todo.id !== action.id);\n    default:\n      return state;\n  }\n}","import React, { createContext, useReducer, useEffect } from 'react';\nimport { todoReducer } from '../reducers/todoReducer';\n\nexport const TodoContext = createContext();\n\nconst TodoContextProvider = (props) => {\n  const [todos, dispatch] = useReducer(todoReducer, [], () => {\n    const localData = localStorage.getItem('todos');\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n    // this hook will run whenever there is change in books\n  }, [todos]);\n  return (\n    <TodoContext.Provider value={{ todos, dispatch }}>\n      {props.children}\n    </TodoContext.Provider>\n  );\n}\n \nexport default TodoContextProvider;","import React, { useContext } from 'react';\nimport { TodoContext } from '../contexts/TodoContext';\n\nconst Navbar = () => {\n  const { todos } = useContext(TodoContext);\n  return (\n    <div className=\"navbar\">\n      <h1>To-do List</h1>\n      <p>Currently you have {todos.length} tasks to get through...</p>\n    </div>\n  );\n}\n \nexport default Navbar;","import React, { useContext } from 'react';\nimport { TodoContext } from '../contexts/TodoContext';\n\nconst TodoDetails = ({ todo }) => {\n  const { dispatch } = useContext(TodoContext);\n  return (\n    <li onClick={() => dispatch({ type: 'REMOVE_TODO', id: todo.id })}>\n      <div className=\"title\">{todo.title}</div>\n      <div className=\"brief\">{todo.brief}</div>\n    </li>\n  );\n}\n\nexport default TodoDetails;","import React, { useContext } from 'react';\nimport TodoDetails from './TodoDetails';\nimport { TodoContext } from '../contexts/TodoContext';\n\nconst TodoList = () => {\n  const { todos } = useContext(TodoContext);\n  return todos.length ? (\n    <div className=\"todo-list\">\n      <ul>\n        {todos.map(todo => {\n          return ( <TodoDetails todo={todo} key={todo.id} /> );\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\">No tasks pending in your list, Enjoy :)</div>\n  );\n}\n\nexport default TodoList;","import React, { useContext, useState } from 'react';\nimport { TodoContext } from '../contexts/TodoContext';\n\nconst NewTodoForm = () => {\n  const { dispatch } = useContext(TodoContext);\n  const [title, setTitle] = useState('');\n  const [brief, setBrief] = useState('');\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (title !== ''){\n\n      dispatch({ type: 'ADD_TODO', todo: { title, brief }});\n    }\n    setTitle('');\n    setBrief('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" placeholder=\"Todo Title\" value={title}\n        onChange={(e) => setTitle(e.target.value)} />\n      <input type=\"text\" placeholder=\"Brief...\" value={brief}\n        onChange={(e) => setBrief(e.target.value)} />\n      <input type=\"submit\" value=\"Add todo\" />\n    </form>\n  );\n}\n \nexport default NewTodoForm;","import React from 'react';\nimport Navbar from './components/Navbar';\nimport TodoContextProvider from './contexts/TodoContext';\nimport TodoList from './components/TodoList';\nimport NewTodoForm from './components/NewTodoForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContextProvider>\n        <Navbar />\n        <TodoList />\n        <NewTodoForm />\n      </TodoContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}